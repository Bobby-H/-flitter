*=  Welcome to the Flitter README; where i'll list  =*
*=  the steps taken both in brainstorming & in      =*
*=  development for our twitter clone; Flitter      =*

So in yesterdays class i mentioned that the differences in development often come
from preferred approach. yesterday we built simple-blog; a bare bones
rails blog, from the backend up, starting from the model and then generating our
associated controller and its accompanying view.

Since were referencing an existing website i'm thinking "let me get the look down
first, then i'll build out my backend." And since I know my controller holds all
my respective pages - the first thing i have to do is generate a controller.

im naming my controller Pages because it's going to be the file holding all the
rest of my pages (my Controller#Actions). Pages holds my index page, home page,
profile page, & explore page.

when we press enter we see that rails has generated our PagesController file,
complete with empty actions for each of our pages - which we can also see in our
views.

sweet - now we can visit our views by using the extensions /pages/controllerAction
but, while this works, it could work better. we want to think as if though
localhost:3000 is a placeholder for flitter.com. when you visit twitter.com you
don't have to type out twitter.com/pages/index to get to their index page, and we
should have the same aspirations.

we're going to make our /pages/index path our root path. i do this by replacing
index's URI path with it's controller#action:
From: get 'pages/index' To: root 'pages#index'

swik; homepage!

but weit - not that that's not cool - but i still have to type out '/pages/home'
in order to avoid an error. flitter is doomed.

(>0~0)> I hear ya; what we need are smart URLs.
{ Reference code }

neat; so now all of my links are smart and i have root path. but no one's gonna
go to a site where you have to path around via url. we need a navbar - or, to be
more precise, we need a _nav(.html.erb)ar. and we're gonna make it using a partial.

since twitter made bootstrap, and used bootstrap to stylize their site, im going
to do the same thing. BUT - instead of going to my app/views/layouts/app.html.erb
to manually c/p CDNs into our app - i just want to install a gem and be done with
it!

so i first pull up the documentation on the Oficial Bootstrap gem,
https://github.com/twbs/bootstrap-sass, c/p the gem line into my gemfile, &
bundle install.
And from here on down i'm just referencing documentation.
